import re
import argparse
import pandas as pd
from datetime import datetime, timedelta


def parse_date(raw: str) -> str:
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç –≤ –µ–¥–∏–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç 'DD.MM.YYYY HH:MM'.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
        - –ø–æ–ª–Ω—ã–µ –¥–∞—Ç—ã 'DD.MM.YYYY HH:MM'
        - 'X –º–∏–Ω—É—Ç(–∞/—ã) –Ω–∞–∑–∞–¥'
        - '—á–∞—Å –Ω–∞–∑–∞–¥', '–¥–≤–∞ —á–∞—Å–∞ –Ω–∞–∑–∞–¥', '—Ç—Ä–∏ —á–∞—Å–∞ –Ω–∞–∑–∞–¥'
        - 'X —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥'
        - '—Å–µ–≥–æ–¥–Ω—è –≤ HH:MM'
        - '–≤—á–µ—Ä–∞ –≤ HH:MM'
        - 'DD –º–µ—Å. –≤ HH:MM'
    –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ö–æ–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É.
    """
    if not raw:
        return ''
    now = datetime.now()
    raw_l = raw.lower().strip()

    # –ü–æ–ª–Ω–∞—è –¥–∞—Ç–∞ 'DD.MM.YYYY HH:MM'
    m = re.match(r"(\d{2})\.(\d{2})\.(\d{4})\s+(\d{1,2}):(\d{2})", raw_l)
    if m:
        day, month, year, hour, minute = map(int, m.groups())
        dt = datetime(year, month, day, hour, minute)
        return dt.strftime('%d.%m.%Y %H:%M')

    # X –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥
    m = re.match(r"(\d+)\s+–º–∏–Ω—É—Ç", raw_l)
    if m:
        dt = now - timedelta(minutes=int(m.group(1)))
        return dt.strftime('%d.%m.%Y %H:%M')

    # —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —á–∞—Å–æ–≤: '—á–∞—Å –Ω–∞–∑–∞–¥', '–¥–≤–∞ —á–∞—Å–∞ –Ω–∞–∑–∞–¥', '—Ç—Ä–∏ —á–∞—Å–∞ –Ω–∞–∑–∞–¥'
    textual_map = {'—á–∞—Å –Ω–∞–∑–∞–¥': 1, '–¥–≤–∞ —á–∞—Å–∞ –Ω–∞–∑–∞–¥': 2, '—Ç—Ä–∏ —á–∞—Å–∞ –Ω–∞–∑–∞–¥': 3}
    if raw_l in textual_map:
        dt = now - timedelta(hours=textual_map[raw_l])
        return dt.strftime('%d.%m.%Y %H:%M')

    # —Ü–∏—Ñ—Ä–æ–≤—ã–µ —á–∞—Å—ã –Ω–∞–∑–∞–¥ 'X —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥'
    m = re.match(r"(\d+)\s+—á–∞—Å", raw_l)
    if m:
        dt = now - timedelta(hours=int(m.group(1)))
        return dt.strftime('%d.%m.%Y %H:%M')

    # —Å–µ–≥–æ–¥–Ω—è –≤ HH:MM
    m = re.match(r"—Å–µ–≥–æ–¥–Ω—è –≤ (\d{1,2}):(\d{2})", raw_l)
    if m:
        hour, minute = int(m.group(1)), int(m.group(2))
        dt = now.replace(hour=hour, minute=minute, second=0, microsecond=0)
        return dt.strftime('%d.%m.%Y %H:%M')

    # –≤—á–µ—Ä–∞ –≤ HH:MM
    m = re.match(r"–≤—á–µ—Ä–∞ –≤ (\d{1,2}):(\d{2})", raw_l)
    if m:
        hour, minute = int(m.group(1)), int(m.group(2))
        dt = (now - timedelta(days=1)).replace(hour=hour, minute=minute, second=0, microsecond=0)
        return dt.strftime('%d.%m.%Y %H:%M')

    # DD –º–µ—Å. –≤ HH:MM
    mon_map = {
        '—è–Ω–≤': 1, '—Ñ–µ–≤': 2, '–º–∞—Ä': 3, '–∞–ø—Ä': 4, '–º–∞–π': 5, '–∏—é–Ω': 6,
        '–∏—é–ª': 7, '–∞–≤–≥': 8, '—Å–µ–Ω': 9, '–æ–∫—Ç': 10, '–Ω–æ—è': 11, '–¥–µ–∫': 12
    }
    m = re.match(r"(\d{1,2})\s+(—è–Ω–≤|—Ñ–µ–≤|–º–∞—Ä|–∞–ø—Ä|–º–∞–π|–∏—é–Ω|–∏—é–ª|–∞–≤–≥|—Å–µ–Ω|–æ–∫—Ç|–Ω–æ—è|–¥–µ–∫) –≤ (\d{1,2}):(\d{2})", raw_l)
    if m:
        day = int(m.group(1))
        month = mon_map[m.group(2)]
        hour, minute = int(m.group(3)), int(m.group(4))
        year = now.year
        dt = datetime(year, month, day, hour, minute)
        return dt.strftime('%d.%m.%Y %H:%M')

    # fallback
    return raw


def parse_votes(md_file: str) -> pd.DataFrame:
    """
    –ß–∏—Ç–∞–µ—Ç —Ñ–∞–π–ª —Å –±–ª–æ–∫–∞–º–∏:
      –ò–º—è, [–¥–∞—Ç–∞]
      –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∏–º—è, –Ω–æ–º–µ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏ –¥–∞—Ç—É.
    """
    header_re = re.compile(r"^(.+), \[(\d{2}\.\d{2}\.\d{4} \d{1,2}:\d{2})\]$")
    number_re = re.compile(r"([1-9][0-9]?)")

    records = []
    with open(md_file, 'r', encoding='utf-8') as f:
        lines = [line.strip() for line in f]

    i = 0
    while i < len(lines):
        m = header_re.match(lines[i])
        if m and i + 1 < len(lines):
            username = m.group(1)
            raw_date = m.group(2)
            comment = lines[i + 1]
            num_match = number_re.search(comment)
            if num_match:
                participant = int(num_match.group(1))
                records.append({'–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è': username,
                                '–ù–æ–º–µ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞': participant,
                                '–î–∞—Ç–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è': raw_date})
            i += 2
        else:
            i += 1

    df = pd.DataFrame(records)
    df['–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è (Excel)'] = df['–î–∞—Ç–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è'].apply(parse_date)
    df['–î–∞—Ç–∞'] = df['–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è (Excel)'].apply(lambda x: x.split(' ')[0] if ' ' in x else x)
    return df


def summarize_all(df: pd.DataFrame) -> pd.DataFrame:
    return (df['–ù–æ–º–µ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞']
            .value_counts()
            .sort_index()
            .rename_axis('–ù–æ–º–µ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞')
            .reset_index(name='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤'))


def detail_by_user(df: pd.DataFrame) -> pd.DataFrame:
    return df[['–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', '–ù–æ–º–µ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞', '–î–∞—Ç–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è', '–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è (Excel)', '–î–∞—Ç–∞']]


def summarize_unique(df: pd.DataFrame) -> pd.DataFrame:
    return (df.drop_duplicates(subset=['–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'], keep='first')['–ù–æ–º–µ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞']
            .value_counts()
            .sort_index()
            .rename_axis('–ù–æ–º–µ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞')
            .reset_index(name='–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≥–æ–ª–æ—Å–∞'))


def main():
    parser = argparse.ArgumentParser(description='–ü–æ–¥—Å—á–µ—Ç –≥–æ–ª–æ—Å–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞')
    parser.add_argument('input_file', help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –≥–æ–ª–æ—Å–∞–º–∏')
    parser.add_argument('--excel', action='store_true', help='–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ Excel (results-tg.xlsx)')
    args = parser.parse_args()

    print('*–ü–∞—Ä—Å–∏–Ω–≥ –≥–æ–ª–æ—Å–æ–≤ –Ω–∞—á–∞—Ç!* üòä')
    df = parse_votes(args.input_file)

    print('\n*–¢–∞–±–ª–∏—Ü–∞ ‚Ññ1 ‚Äî –°–≤–æ–¥–Ω–∞—è –ø–æ –≤—Å–µ–º –≥–æ–ª–æ—Å–∞–º:*')
    print(summarize_all(df).to_string(index=False))

    print('\n*–¢–∞–±–ª–∏—Ü–∞ ‚Ññ2 ‚Äî –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:*')
    print(detail_by_user(df).to_string(index=False))

    print('\n*–¢–∞–±–ª–∏—Ü–∞ ‚Ññ3 ‚Äî –°–≤–æ–¥–Ω–∞—è –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –≥–æ–ª–æ—Å–∞–º:*')
    print(summarize_unique(df).to_string(index=False))

    if args.excel:
        with pd.ExcelWriter('results-tg.xlsx') as writer:
            summarize_all(df).to_excel(writer, sheet_name='–í—Å–µ –≥–æ–ª–æ—Å–∞', index=False)
            detail_by_user(df).to_excel(writer, sheet_name='–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è', index=False)
            summarize_unique(df).to_excel(writer, sheet_name='–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≥–æ–ª–æ—Å–∞', index=False)
        print('\n**–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ results-tg.xlsx** üéâ')


if __name__ == '__main__':
    main()
